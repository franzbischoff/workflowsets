[{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others‚Äô private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@rstudio.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla‚Äôs code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tidymodels","title":"Contributing to tidymodels","text":"detailed information contributing tidymodels packages, see development contributing guide.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing to tidymodels","text":"Typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES ‚úÖ: edit roxygen comment .R file R/ directory. üö´: edit .Rd file man/ directory. use roxygen2, Markdown syntax, documentation.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CONTRIBUTING.html","id":"code","dir":"","previous_headings":"","what":"Code","title":"Contributing to tidymodels","text":"submit üéØ pull request tidymodels package, always file issue confirm tidymodels team agrees idea happy basic proposal. tidymodels packages work together. package contains unit tests, integration tests tests using packages contained extratests. recommend create Git branch pull request (PR). Look build status making changes. README contains badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don‚Äôt restyle code nothing PR. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s). use testthat. Contributions test cases included easier accept. contribution spans use one package, consider building extratests changes check breakages /adding new tests . Let us know PR ran extra tests.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"Code","what":"Code of Conduct","title":"Contributing to tidymodels","text":"project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 RStudio PBC Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Kuhn. Author, maintainer. . Copyright holder, funder.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuhn M (2022). workflowsets: Create Collection 'tidymodels' Workflows. https://github.com/tidymodels/workflowsets, https://workflowsets.tidymodels.org.","code":"@Manual{,   title = {workflowsets: Create a Collection of 'tidymodels' Workflows},   author = {Max Kuhn},   year = {2022},   note = {https://github.com/tidymodels/workflowsets, https://workflowsets.tidymodels.org}, }"},{"path":"https://workflowsets.tidymodels.org/dev/index.html","id":"workflowsets","dir":"","previous_headings":"","what":"Create a Collection of tidymodels Workflows","title":"Create a Collection of tidymodels Workflows","text":"goal workflowsets allow users create easily fit large number models. workflowsets can create workflow set holds multiple workflow objects. objects can created crossing combinations preprocessors (e.g., formula, recipe, etc) model specifications. set can easier tuned resampled using set simple commands.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create a Collection of tidymodels Workflows","text":"can install released version workflowsets CRAN : development version GitHub :","code":"install.packages(\"workflowsets\") install.packages(\"pak\") pak::pak(\"tidymodels/workflowsets\")"},{"path":"https://workflowsets.tidymodels.org/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Create a Collection of tidymodels Workflows","text":"often good idea try different types models preprocessing methods specific data set. tidymodels provides tools purpose: recipes preprocessing/feature engineering model specifications. workflowsets functions creating evaluating combinations modeling elements. example, Chicago train ridership data many numeric predictors highly correlated. approaches compensating issue modeling: Use feature filter remove redundant predictors. Apply principal component analysis decorrelate data. Use regularized model make estimation process insensitive correlated predictors. first two methods can used model last option available specific models. Let‚Äôs create basic recipe build : enact correlation filter, additional step used: Similarly, PCA: might want assess different models, including regularized method (glmnet): Rather creating 9 combinations preprocessors models, can create workflow set: doesn‚Äôt make sense use PCA filter glmnet model. can remove easily: models tuning parameters. resolve , ‚Äôll need resampling set. case, time-series resampling method used: ‚Äôll use simple grid search models running workflow_map(). execute resampling tuning function workflows workflow column: results column contains results call tune_grid() workflows. autoplot() method shows rankings workflows:  best workflow:  can determine well combination looking best results per workflow:","code":"library(tidymodels) library(workflowsets) data(Chicago) # Use a small sample to keep file sizes down: Chicago <- Chicago %>% slice(1:365)  base_recipe <-     recipe(ridership ~ ., data = Chicago) %>%     # create date features    step_date(date) %>%     step_holiday(date) %>%     # remove date from the list of predictors    update_role(date, new_role = \"id\") %>%     # create dummy variables from factor columns    step_dummy(all_nominal()) %>%     # remove any columns with a single unique value    step_zv(all_predictors()) %>%     step_normalize(all_predictors()) filter_rec <-     base_recipe %>%     step_corr(all_of(stations), threshold = tune()) pca_rec <-     base_recipe %>%     step_pca(all_of(stations), num_comp = tune()) %>%     step_normalize(all_predictors()) regularized_spec <-     linear_reg(penalty = tune(), mixture = tune()) %>%     set_engine(\"glmnet\")  cart_spec <-     decision_tree(cost_complexity = tune(), min_n = tune()) %>%     set_engine(\"rpart\") %>%     set_mode(\"regression\")  knn_spec <-     nearest_neighbor(neighbors = tune(), weight_func = tune()) %>%     set_engine(\"kknn\") %>%     set_mode(\"regression\") chi_models <-     workflow_set(       preproc = list(simple = base_recipe, filter = filter_rec,                       pca = pca_rec),       models = list(glmnet = regularized_spec, cart = cart_spec,                      knn = knn_spec),       cross = TRUE    ) chi_models #> # A workflow set/tibble: 9 √ó 4 #>   wflow_id      info             option    result     #>   <chr>         <list>           <list>    <list>     #> 1 simple_glmnet <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 2 simple_cart   <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 3 simple_knn    <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 4 filter_glmnet <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 5 filter_cart   <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 6 filter_knn    <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 7 pca_glmnet    <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 8 pca_cart      <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 9 pca_knn       <tibble [1 √ó 4]> <opts[0]> <list [0]> chi_models <-     chi_models %>%     anti_join(tibble(wflow_id = c(\"pca_glmnet\", \"filter_glmnet\")),               by = \"wflow_id\") splits <-     sliding_period(       Chicago,       date,       \"day\",       lookback = 300,   # Each resample has 300 days for modeling       assess_stop = 7,  # One week for performance assessment       step = 7          # Ensure non-overlapping weeks for assessment    ) splits #> # Sliding period resampling  #> # A tibble: 9 √ó 2 #>   splits          id     #>   <list>          <chr>  #> 1 <split [301/7]> Slice1 #> 2 <split [301/7]> Slice2 #> 3 <split [301/7]> Slice3 #> 4 <split [301/7]> Slice4 #> 5 <split [301/7]> Slice5 #> 6 <split [301/7]> Slice6 #> 7 <split [301/7]> Slice7 #> 8 <split [301/7]> Slice8 #> 9 <split [301/7]> Slice9 set.seed(123) chi_models <-     chi_models %>%     # The first argument is a function name from the {{tune}} package    # such as `tune_grid()`, `fit_resamples()`, etc.    workflow_map(\"tune_grid\", resamples = splits, grid = 10,                  metrics = metric_set(mae), verbose = TRUE) #> i 1 of 7 tuning:     simple_glmnet #> ‚úì 1 of 7 tuning:     simple_glmnet (15.8s) #> i 2 of 7 tuning:     simple_cart #> ‚úì 2 of 7 tuning:     simple_cart (16.2s) #> i 3 of 7 tuning:     simple_knn #> ‚úì 3 of 7 tuning:     simple_knn (15.8s) #> i 4 of 7 tuning:     filter_cart #> ‚úì 4 of 7 tuning:     filter_cart (23.3s) #> i 5 of 7 tuning:     filter_knn #> ‚úì 5 of 7 tuning:     filter_knn (23.3s) #> i 6 of 7 tuning:     pca_cart #> ‚úì 6 of 7 tuning:     pca_cart (19.3s) #> i 7 of 7 tuning:     pca_knn #> ‚úì 7 of 7 tuning:     pca_knn (18.8s) chi_models #> # A workflow set/tibble: 7 √ó 4 #>   wflow_id      info             option    result    #>   <chr>         <list>           <list>    <list>    #> 1 simple_glmnet <tibble [1 √ó 4]> <opts[3]> <tune[+]> #> 2 simple_cart   <tibble [1 √ó 4]> <opts[3]> <tune[+]> #> 3 simple_knn    <tibble [1 √ó 4]> <opts[3]> <tune[+]> #> 4 filter_cart   <tibble [1 √ó 4]> <opts[3]> <tune[+]> #> 5 filter_knn    <tibble [1 √ó 4]> <opts[3]> <tune[+]> #> 6 pca_cart      <tibble [1 √ó 4]> <opts[3]> <tune[+]> #> 7 pca_knn       <tibble [1 √ó 4]> <opts[3]> <tune[+]> autoplot(chi_models) autoplot(chi_models, select_best = TRUE) rank_results(chi_models, rank_metric = \"mae\", select_best = TRUE) %>%     select(rank, mean, model, wflow_id, .config) #> # A tibble: 7 √ó 5 #>    rank  mean model            wflow_id      .config               #>   <int> <dbl> <chr>            <chr>         <chr>                 #> 1     1  1.85 linear_reg       simple_glmnet Preprocessor1_Model07 #> 2     2  2.18 decision_tree    simple_cart   Preprocessor1_Model09 #> 3     3  2.95 decision_tree    filter_cart   Preprocessor07_Model1 #> 4     4  3.00 decision_tree    pca_cart      Preprocessor3_Model2  #> 5     5  3.34 nearest_neighbor simple_knn    Preprocessor1_Model05 #> 6     6  3.50 nearest_neighbor filter_knn    Preprocessor07_Model1 #> 7     7  3.81 nearest_neighbor pca_knn       Preprocessor4_Model1"},{"path":"https://workflowsets.tidymodels.org/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Create a Collection of tidymodels Workflows","text":"project released Contributor Code Conduct. contributing project, agree abide terms. questions discussions tidymodels packages, modeling, machine learning, please post RStudio Community. think encountered bug, please submit issue. Either way, learn create share reprex (minimal, reproducible example), clearly communicate code. Check details contributing guidelines tidymodels packages get help.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/as_workflow_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert existing objects to a workflow set ‚Äî as_workflow_set","title":"Convert existing objects to a workflow set ‚Äî as_workflow_set","text":"Use existing objects create workflow set. list objects either simple workflows objects class \"tune_results converted workflow set.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/as_workflow_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert existing objects to a workflow set ‚Äî as_workflow_set","text":"","code":"as_workflow_set(...)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/as_workflow_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert existing objects to a workflow set ‚Äî as_workflow_set","text":"... One named objects. Names unique objects least one following classes: workflow, iteration_results, tune_results, resample_results, tune_race. tune_results element also contain original workflow (accomplished using save_workflow option control function).","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/as_workflow_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert existing objects to a workflow set ‚Äî as_workflow_set","text":"workflow set. Note option column reflect options used create object.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/as_workflow_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert existing objects to a workflow set ‚Äî as_workflow_set","text":"","code":"# ------------------------------------------------------------------------------ # Existing results  # Use the already worked example to show how to add tuned # objects to a workflow set  results <- two_class_res %>% purrr::pluck(\"result\") names(results) <- two_class_res$wflow_id  # These are all objects that have been resampled or tuned: purrr::map_chr(results, ~ class(.x)[1]) #>          none_cart           none_glm          none_mars  #>     \"tune_results\" \"resample_results\"     \"tune_results\"  #>      yj_trans_cart       yj_trans_glm      yj_trans_mars  #>     \"tune_results\" \"resample_results\"     \"tune_results\"   # Use rlang's !!! operator to splice in the elements of the list new_set <- as_workflow_set(!!!results)  # ------------------------------------------------------------------------------ # Make a set from unfit workflows  library(parsnip) library(workflows)  lr_spec <- logistic_reg()  main_effects <-   workflow() %>%   add_model(lr_spec) %>%   add_formula(Class ~ .)  interactions <-   workflow() %>%   add_model(lr_spec) %>%   add_formula(Class ~ (.)^2)  as_workflow_set(main = main_effects, int = interactions) #> # A workflow set/tibble: 2 √ó 4 #>   wflow_id info             option    result #>   <chr>    <list>           <list>    <list> #> 1 main     <tibble [1 √ó 4]> <opts[0]> <NULL> #> 2 int      <tibble [1 √ó 4]> <opts[0]> <NULL>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/autoplot.workflow_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","title":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","text":"autoplot() method can performance metrics ranked using metric. can also run autoplot() individual results (per wflow_id).","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/autoplot.workflow_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","text":"","code":"# S3 method for workflow_set autoplot(   object,   rank_metric = NULL,   metric = NULL,   id = \"workflow_set\",   select_best = FALSE,   std_errs = qnorm(0.95),   ... )"},{"path":"https://workflowsets.tidymodels.org/dev/reference/autoplot.workflow_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","text":"object workflow_set whose elements results. rank_metric character string metric used rank results. none given, first metric metric set used (filtering metric option). metric character vector metrics (apart rank_metric) included visualization. id character string plot. value \"workflow_set\" used, results model (sub-model) ordered plotted. Alternatively, value workflow set's wflow_id can given autoplot() method executed workflow's results. select_best logical; results contain numerically best submodel per workflow? std_errs number standard errors plot (standard error exists). ... options pass autoplot().","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/autoplot.workflow_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","text":"ggplot object.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/autoplot.workflow_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","text":"function intended produce default plot visualize helpful information across possible applications workflow set. appropriate plot specific analysis can created calling rank_results() using standard ggplot2 code plotting. x-axis workflow rank set (value one best) versus performance metric(s) y-axis. multiple metrics, facets metric. multiple resamples used, confidence bounds shown result (90% confidence, default).","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/autoplot.workflow_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the results of a workflow set ‚Äî autoplot.workflow_set","text":"","code":"autoplot(two_class_res)  autoplot(two_class_res, select_best = TRUE)  autoplot(two_class_res, id = \"yj_trans_cart\", metric = \"roc_auc\")"},{"path":"https://workflowsets.tidymodels.org/dev/reference/collect_metrics.workflow_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","title":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","text":"Return tibble performance metrics models submodels.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/collect_metrics.workflow_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","text":"","code":"# S3 method for workflow_set collect_metrics(x, summarize = TRUE, ...)  # S3 method for workflow_set collect_predictions(   x,   summarize = TRUE,   parameters = NULL,   select_best = FALSE,   metric = NULL,   ... )"},{"path":"https://workflowsets.tidymodels.org/dev/reference/collect_metrics.workflow_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","text":"x workflow_set object workflows evaluated. summarize logical whether performance estimates summarized via mean (resamples) raw performance values (per resample) returned along resampling identifiers. collecting predictions, averaged multiple assessment sets contain row. ... currently used. parameters optional tibble tuning parameter values can used filter predicted values processing. tibble columns tuning parameter identifier (e.g. \"my_param\" tune(\"my_param\") used). select_best single logical whether numerically best results retained. TRUE, parameters argument ignored. metric character string metric used select_best.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/collect_metrics.workflow_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","text":"tibble.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/collect_metrics.workflow_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","text":"applied workflow set, metrics predictions returned contain actual tuning parameter columns values (unlike collect functions run objects). reason workflow sets can contain different types models models different tuning parameters. columns needed, two options. First, .config column can used merge tuning parameter columns appropriate object. Alternatively, map() function can used get metrics original objects (see example ).","code":""},{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/reference/collect_metrics.workflow_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Obtain and format results produced by tuning functions for workflow sets ‚Äî collect_metrics.workflow_set","text":"","code":"library(dplyr) #>  #> Attaching package: ‚Äòdplyr‚Äô #> The following objects are masked from ‚Äòpackage:stats‚Äô: #>  #>     filter, lag #> The following objects are masked from ‚Äòpackage:base‚Äô: #>  #>     intersect, setdiff, setequal, union library(purrr) library(tidyr)  # ------------------------------------------------------------------------------ # \\donttest{ collect_metrics(two_class_res) #> # A tibble: 52 √ó 9 #>    wflow_id  .config  preproc model .metric .estimator  mean     n std_err #>    <chr>     <chr>    <chr>   <chr> <chr>   <chr>      <dbl> <int>   <dbl> #>  1 none_cart Preproc‚Ä¶ formula deci‚Ä¶ accura‚Ä¶ binary     0.777     5 0.00517 #>  2 none_cart Preproc‚Ä¶ formula deci‚Ä¶ roc_auc binary     0.839     5 0.0160  #>  3 none_cart Preproc‚Ä¶ formula deci‚Ä¶ accura‚Ä¶ binary     0.784     5 0.00812 #>  4 none_cart Preproc‚Ä¶ formula deci‚Ä¶ roc_auc binary     0.841     5 0.0171  #>  5 none_cart Preproc‚Ä¶ formula deci‚Ä¶ accura‚Ä¶ binary     0.791     5 0.0111  #>  6 none_cart Preproc‚Ä¶ formula deci‚Ä¶ roc_auc binary     0.853     5 0.00813 #>  7 none_cart Preproc‚Ä¶ formula deci‚Ä¶ accura‚Ä¶ binary     0.814     5 0.0104  #>  8 none_cart Preproc‚Ä¶ formula deci‚Ä¶ roc_auc binary     0.829     5 0.0145  #>  9 none_cart Preproc‚Ä¶ formula deci‚Ä¶ accura‚Ä¶ binary     0.788     5 0.0133  #> 10 none_cart Preproc‚Ä¶ formula deci‚Ä¶ roc_auc binary     0.852     5 0.0101  #> # ‚Ä¶ with 42 more rows  # Alternatively, if the tuning parameter values are needed: two_class_res %>%   dplyr::filter(grepl(\"cart\", wflow_id)) %>%   mutate(metrics = map(result, collect_metrics)) %>%   dplyr::select(wflow_id, metrics) %>%   tidyr::unnest(cols = metrics) #> # A tibble: 40 √ó 9 #>    wflow_id  cost_complexity min_n .metric  .estimator  mean     n std_err #>    <chr>               <dbl> <int> <chr>    <chr>      <dbl> <int>   <dbl> #>  1 none_cart        2.28e- 7    13 accuracy binary     0.777     5 0.00517 #>  2 none_cart        2.28e- 7    13 roc_auc  binary     0.839     5 0.0160  #>  3 none_cart        1.32e- 5    16 accuracy binary     0.784     5 0.00812 #>  4 none_cart        1.32e- 5    16 roc_auc  binary     0.841     5 0.0171  #>  5 none_cart        8.19e-10    26 accuracy binary     0.791     5 0.0111  #>  6 none_cart        8.19e-10    26 roc_auc  binary     0.853     5 0.00813 #>  7 none_cart        9.52e- 3     9 accuracy binary     0.814     5 0.0104  #>  8 none_cart        9.52e- 3     9 roc_auc  binary     0.829     5 0.0145  #>  9 none_cart        4.76e- 7    20 accuracy binary     0.788     5 0.0133  #> 10 none_cart        4.76e- 7    20 roc_auc  binary     0.852     5 0.0101  #> # ‚Ä¶ with 30 more rows, and 1 more variable: .config <chr> # }  collect_metrics(two_class_res, summarize = FALSE) #> # A tibble: 260 √ó 8 #>    wflow_id  .config      preproc model id    .metric .estimator .estimate #>    <chr>     <chr>        <chr>   <chr> <chr> <chr>   <chr>          <dbl> #>  1 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold1 accura‚Ä¶ binary         0.786 #>  2 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold1 roc_auc binary         0.875 #>  3 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold2 accura‚Ä¶ binary         0.766 #>  4 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold2 roc_auc binary         0.851 #>  5 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold3 accura‚Ä¶ binary         0.778 #>  6 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold3 roc_auc binary         0.848 #>  7 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold4 accura‚Ä¶ binary         0.766 #>  8 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold4 roc_auc binary         0.779 #>  9 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold5 accura‚Ä¶ binary         0.791 #> 10 none_cart Preprocesso‚Ä¶ formula deci‚Ä¶ Fold5 roc_auc binary         0.841 #> # ‚Ä¶ with 250 more rows"},{"path":"https://workflowsets.tidymodels.org/dev/reference/comment_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add annotations and comments for workflows ‚Äî comment_add","title":"Add annotations and comments for workflows ‚Äî comment_add","text":"comment_add() can used log important information workflow results work. Comments can appended removed.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/comment_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add annotations and comments for workflows ‚Äî comment_add","text":"","code":"comment_add(x, id, ..., append = TRUE, collapse = \"\\n\")  comment_get(x, id)  comment_reset(x, id)  comment_print(x, id = NULL, ...)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/comment_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add annotations and comments for workflows ‚Äî comment_add","text":"x workflow set id single character string value wflow_id column. comment_print(), id can vector NULL (indicates comments printed). ... One character strings. append logical value determine new comment added existing values. collapse character string separates comments.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/comment_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add annotations and comments for workflows ‚Äî comment_add","text":"comment_add() comment_reset() return updated workflow set. comment_get() returns character string. comment_print() returns NULLinvisibly.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/comment_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add annotations and comments for workflows ‚Äî comment_add","text":"","code":"two_class_set %>% comment_get(\"none_cart\") #> [1] \"\"  new_set <-   two_class_set %>%   comment_add(\"none_cart\", \"What does 'cart' stand for\\u2753\") %>%   comment_add(\"none_cart\", \"Classification And Regression Trees.\")  comment_print(new_set) #> ‚îÄ‚îÄ none_cart ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  #>  #> What does 'cart' stand for‚ùì #>  #> Classification And Regression Trees.  #>   new_set %>% comment_get(\"none_cart\") #> [1] \"What does 'cart' stand for‚ùì\\nClassification And Regression Trees.\"  new_set %>%   comment_reset(\"none_cart\") %>%   comment_get(\"none_cart\") #> [1] \"\""},{"path":"https://workflowsets.tidymodels.org/dev/reference/extract_workflow_set_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","title":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","text":"functions extract various elements workflow set object. exist yet, error thrown. extract_preprocessor() returns formula, recipe, variable expressions used preprocessing. extract_spec_parsnip() returns parsnip model specification. extract_fit_parsnip() returns parsnip model fit object. extract_fit_engine() returns engine specific fit embedded within parsnip model fit. example, using parsnip::linear_reg() \"lm\" engine, returns underlying lm object. extract_mold() returns preprocessed \"mold\" object returned hardhat::mold(). contains information preprocessing, including either prepped recipe, formula terms object, variable selectors. extract_recipe() returns recipe. estimated argument specifies whether fitted original recipe returned. extract_workflow_set_result() returns results workflow_map() particular workflow. extract_workflow() returns workflow object. workflow estimated.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/extract_workflow_set_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","text":"","code":"extract_workflow_set_result(x, id, ...)  # S3 method for workflow_set extract_workflow(x, id, ...)  # S3 method for workflow_set extract_spec_parsnip(x, id, ...)  # S3 method for workflow_set extract_recipe(x, id, ..., estimated = TRUE)  # S3 method for workflow_set extract_fit_parsnip(x, id, ...)  # S3 method for workflow_set extract_fit_engine(x, id, ...)  # S3 method for workflow_set extract_mold(x, id, ...)  # S3 method for workflow_set extract_preprocessor(x, id, ...)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/extract_workflow_set_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","text":"x workflow set. id single character string workflow ID. ... options (currently used). estimated logical whether original (unfit) recipe fitted recipe returned.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/extract_workflow_set_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","text":"extracted value object, x, described description section.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/extract_workflow_set_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","text":"functions supersede pull_*() functions (e.g., extract_workflow_set_result()).","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/extract_workflow_set_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract elements of workflow sets ‚Äî extract_workflow_set_result","text":"","code":"library(tune)  extract_workflow_set_result(two_class_res, \"none_cart\") #> # Tuning results #> # 5-fold cross-validation  #> # A tibble: 5 √ó 4 #>   splits            id    .metrics          .notes           #>   <list>            <chr> <list>            <list>           #> 1 <split [632/159]> Fold1 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 2 <split [633/158]> Fold2 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 3 <split [633/158]> Fold3 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 4 <split [633/158]> Fold4 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 5 <split [633/158]> Fold5 <tibble [20 √ó 6]> <tibble [0 √ó 1]>  extract_workflow(two_class_res, \"none_cart\") #> ‚ïê‚ïê Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Formula #> Model: decision_tree() #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Class ~ A + B #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Decision Tree Model Specification (classification) #>  #> Main Arguments: #>   cost_complexity = tune() #>   min_n = tune() #>  #> Computational engine: rpart  #>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/leave_var_out_formulas.html","id":null,"dir":"Reference","previous_headings":"","what":"Create formulas without each predictor ‚Äî leave_var_out_formulas","title":"Create formulas without each predictor ‚Äî leave_var_out_formulas","text":"initial model formula, create list formulas exclude predictor.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/leave_var_out_formulas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create formulas without each predictor ‚Äî leave_var_out_formulas","text":"","code":"leave_var_out_formulas(formula, data, full_model = TRUE, ...)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/leave_var_out_formulas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create formulas without each predictor ‚Äî leave_var_out_formulas","text":"formula model formula contains least two predictors. data data frame. full_model logical; list include original formula? ... Options pass stats::model.frame()","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/leave_var_out_formulas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create formulas without each predictor ‚Äî leave_var_out_formulas","text":"named list formulas","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/leave_var_out_formulas.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create formulas without each predictor ‚Äî leave_var_out_formulas","text":"new formulas obey hierarchy rule interactions without main effects included (unless original formula contains terms). Factor predictors left -(.e., indicator variables created).","code":""},{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/reference/leave_var_out_formulas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create formulas without each predictor ‚Äî leave_var_out_formulas","text":"","code":"data(penguins, package = \"modeldata\")  leave_var_out_formulas(   bill_length_mm ~ .,   data = penguins ) #> $species #> bill_length_mm ~ island + bill_depth_mm + flipper_length_mm +  #>     body_mass_g + sex #> <environment: base> #>  #> $island #> bill_length_mm ~ species + bill_depth_mm + flipper_length_mm +  #>     body_mass_g + sex #> <environment: base> #>  #> $bill_depth_mm #> bill_length_mm ~ species + island + flipper_length_mm + body_mass_g +  #>     sex #> <environment: base> #>  #> $flipper_length_mm #> bill_length_mm ~ species + island + bill_depth_mm + body_mass_g +  #>     sex #> <environment: base> #>  #> $body_mass_g #> bill_length_mm ~ species + island + bill_depth_mm + flipper_length_mm +  #>     sex #> <environment: base> #>  #> $sex #> bill_length_mm ~ species + island + bill_depth_mm + flipper_length_mm +  #>     body_mass_g #> <environment: base> #>  #> $everything #> bill_length_mm ~ . #> <environment: 0x55862cec07f8> #>   leave_var_out_formulas(   bill_length_mm ~ (island + sex)^2 + flipper_length_mm,   data = penguins ) #> $island #> bill_length_mm ~ sex + flipper_length_mm #> <environment: base> #>  #> $sex #> bill_length_mm ~ island + flipper_length_mm #> <environment: base> #>  #> $flipper_length_mm #> bill_length_mm ~ island + sex + island:sex #> <environment: base> #>  #> $`island:sex` #> bill_length_mm ~ island + sex + flipper_length_mm #> <environment: base> #>  #> $everything #> bill_length_mm ~ (island + sex)^2 + flipper_length_mm #> <environment: 0x55862cec07f8> #>   leave_var_out_formulas(   bill_length_mm ~ (island + sex)^2 + flipper_length_mm +     I(flipper_length_mm^2),   data = penguins ) #> $island #> bill_length_mm ~ sex + flipper_length_mm + I(flipper_length_mm^2) #> <environment: base> #>  #> $sex #> bill_length_mm ~ island + flipper_length_mm + I(flipper_length_mm^2) #> <environment: base> #>  #> $flipper_length_mm #> bill_length_mm ~ island + sex + island:sex #> <environment: base> #>  #> $`I(flipper_length_mm^2)` #> bill_length_mm ~ island + sex + flipper_length_mm + island:sex #> <environment: base> #>  #> $`island:sex` #> bill_length_mm ~ island + sex + flipper_length_mm + I(flipper_length_mm^2) #> <environment: base> #>  #> $everything #> bill_length_mm ~ (island + sex)^2 + flipper_length_mm + I(flipper_length_mm^2) #> <environment: 0x55862cec07f8> #>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add and edit options saved in a workflow set ‚Äî option_add","title":"Add and edit options saved in a workflow set ‚Äî option_add","text":"functions helpful manipulating information option column.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add and edit options saved in a workflow set ‚Äî option_add","text":"","code":"option_add(x, ..., id = NULL, strict = FALSE)  option_remove(x, ...)  option_add_parameters(x, id = NULL, strict = FALSE)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add and edit options saved in a workflow set ‚Äî option_add","text":"x workflow set ... list named options. option_remove() can series unquoted option names. id character string one values wflow_id column indicates options update. default, workflows updated. strict logical; show execution stop existing options replaced?","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add and edit options saved in a workflow set ‚Äî option_add","text":"updated workflow set.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add and edit options saved in a workflow set ‚Äî option_add","text":"option_add() used update options workflow set. option_remove() eliminate specific options across rows. option_add_parameters() adds parameter object option column (parameters tuned). Note executing function workflow set, tune_grid(), add options given function option column.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add and edit options saved in a workflow set ‚Äî option_add","text":"","code":"two_class_set %>%   option_add(a = 1) #> # A workflow set/tibble: 6 √ó 4 #>   wflow_id      info             option    result     #>   <chr>         <list>           <list>    <list>     #> 1 none_cart     <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 2 none_glm      <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 3 none_mars     <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 4 yj_trans_cart <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 5 yj_trans_glm  <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 6 yj_trans_mars <tibble [1 √ó 4]> <opts[1]> <list [0]>  two_class_set %>%   option_add(a = 1) %>%   option_add(b = 2, id = \"none_cart\") #> # A workflow set/tibble: 6 √ó 4 #>   wflow_id      info             option    result     #>   <chr>         <list>           <list>    <list>     #> 1 none_cart     <tibble [1 √ó 4]> <opts[2]> <list [0]> #> 2 none_glm      <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 3 none_mars     <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 4 yj_trans_cart <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 5 yj_trans_glm  <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 6 yj_trans_mars <tibble [1 √ó 4]> <opts[1]> <list [0]>  library(tune) two_class_set %>%   option_add_parameters() #> # A workflow set/tibble: 6 √ó 4 #>   wflow_id      info             option    result     #>   <chr>         <list>           <list>    <list>     #> 1 none_cart     <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 2 none_glm      <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 3 none_mars     <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 4 yj_trans_cart <tibble [1 √ó 4]> <opts[1]> <list [0]> #> 5 yj_trans_glm  <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 6 yj_trans_mars <tibble [1 √ó 4]> <opts[1]> <list [0]>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a classed list of options ‚Äî option_list","title":"Make a classed list of options ‚Äî option_list","text":"function returns named list extra class \"workflow_set_options\" corresponding formatting methods printing inside tibbles.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a classed list of options ‚Äî option_list","text":"","code":"option_list(...)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a classed list of options ‚Äî option_list","text":"... set named options (nothing)","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a classed list of options ‚Äî option_list","text":"classed list.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/option_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make a classed list of options ‚Äî option_list","text":"","code":"option_list(a = 1, b = 2) #> a list of options with names:  'a', 'b' option_list() #> an empty container for options"},{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/reference/pull_workflow_set_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract elements from a workflow set ‚Äî pull_workflow_set_result","text":"","code":"pull_workflow_set_result(x, id)  pull_workflow(x, id)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/pull_workflow_set_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract elements from a workflow set ‚Äî pull_workflow_set_result","text":"x workflow set. id single character string workflow ID.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/pull_workflow_set_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract elements from a workflow set ‚Äî pull_workflow_set_result","text":"pull_workflow_set_result() produces tune_result resample_results object. pull_workflow() returns unfit workflow object.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/pull_workflow_set_result.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract elements from a workflow set ‚Äî pull_workflow_set_result","text":"pull_workflow_set_result() retrieves results workflow_map() particular workflow pull_workflow() extracts unfitted workflow info column. extract_workflow_set_result() extract_workflow() functions used instead functions.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/pull_workflow_set_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract elements from a workflow set ‚Äî pull_workflow_set_result","text":"","code":"library(tune)  pull_workflow_set_result(two_class_res, \"none_cart\") #> Warning: `pull_workflow_set_result()` was deprecated in workflowsets 0.1.0. #> Please use `extract_workflow_set_result()` instead. #> # Tuning results #> # 5-fold cross-validation  #> # A tibble: 5 √ó 4 #>   splits            id    .metrics          .notes           #>   <list>            <chr> <list>            <list>           #> 1 <split [632/159]> Fold1 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 2 <split [633/158]> Fold2 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 3 <split [633/158]> Fold3 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 4 <split [633/158]> Fold4 <tibble [20 √ó 6]> <tibble [0 √ó 1]> #> 5 <split [633/158]> Fold5 <tibble [20 √ó 6]> <tibble [0 √ó 1]>  pull_workflow(two_class_res, \"none_cart\") #> Warning: `pull_workflow()` was deprecated in workflowsets 0.1.0. #> Please use `extract_worklfow()` instead. #> ‚ïê‚ïê Workflow ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê #> Preprocessor: Formula #> Model: decision_tree() #>  #> ‚îÄ‚îÄ Preprocessor ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Class ~ A + B #>  #> ‚îÄ‚îÄ Model ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #> Decision Tree Model Specification (classification) #>  #> Main Arguments: #>   cost_complexity = tune() #>   min_n = tune() #>  #> Computational engine: rpart  #>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/rank_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Rank the results by a metric ‚Äî rank_results","title":"Rank the results by a metric ‚Äî rank_results","text":"function sorts results specific performance metric.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/rank_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rank the results by a metric ‚Äî rank_results","text":"","code":"rank_results(x, rank_metric = NULL, select_best = FALSE)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/rank_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rank the results by a metric ‚Äî rank_results","text":"x workflow set results. rank_metric character string metric. select_best logical; results contain numerically best submodel per workflow.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/rank_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rank the results by a metric ‚Äî rank_results","text":"tibble columns: wflow_id, .config, .metric, mean, std_err, n, preprocessor, model, rank.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/rank_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rank the results by a metric ‚Äî rank_results","text":"models exact performance, rank(value, ties.method = \"random\") used (reproducible seed) ranks integers. columns returned tuning parameters since likely different (exist) models. wflow_id .config columns can used determine corresponding parameter values.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/rank_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rank the results by a metric ‚Äî rank_results","text":"","code":"rank_results(chi_features_res) #> # A tibble: 40 √ó 9 #>    wflow_id   .config .metric  mean std_err     n preprocessor model  rank #>    <chr>      <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int> #>  1 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.574      NA     1 recipe       line‚Ä¶     1 #>  2 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     1 #>  3 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.586      NA     1 recipe       line‚Ä¶     2 #>  4 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     2 #>  5 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.590      NA     1 recipe       line‚Ä¶     3 #>  6 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.988      NA     1 recipe       line‚Ä¶     3 #>  7 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.591      NA     1 recipe       line‚Ä¶     4 #>  8 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.988      NA     1 recipe       line‚Ä¶     4 #>  9 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.594      NA     1 recipe       line‚Ä¶     5 #> 10 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     5 #> # ‚Ä¶ with 30 more rows rank_results(chi_features_res, select_best = TRUE) #> # A tibble: 6 √ó 9 #>   wflow_id    .config .metric  mean std_err     n preprocessor model  rank #>   <chr>       <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int> #> 1 plus_pca_lm Prepro‚Ä¶ rmse    0.574      NA     1 recipe       line‚Ä¶     1 #> 2 plus_pca_lm Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     1 #> 3 plus_holid‚Ä¶ Prepro‚Ä¶ rmse    0.646      NA     1 recipe       line‚Ä¶     2 #> 4 plus_holid‚Ä¶ Prepro‚Ä¶ rsq     0.986      NA     1 recipe       line‚Ä¶     2 #> 5 date_lm     Prepro‚Ä¶ rmse    0.733      NA     1 recipe       line‚Ä¶     3 #> 6 date_lm     Prepro‚Ä¶ rsq     0.982      NA     1 recipe       line‚Ä¶     3 rank_results(chi_features_res, rank_metric = \"rsq\") #> # A tibble: 40 √ó 9 #>    wflow_id   .config .metric  mean std_err     n preprocessor model  rank #>    <chr>      <chr>   <chr>   <dbl>   <dbl> <int> <chr>        <chr> <int> #>  1 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.594      NA     1 recipe       line‚Ä¶     1 #>  2 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     1 #>  3 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.574      NA     1 recipe       line‚Ä¶     2 #>  4 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     2 #>  5 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.586      NA     1 recipe       line‚Ä¶     3 #>  6 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.989      NA     1 recipe       line‚Ä¶     3 #>  7 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.591      NA     1 recipe       line‚Ä¶     4 #>  8 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.988      NA     1 recipe       line‚Ä¶     4 #>  9 plus_pca_‚Ä¶ Prepro‚Ä¶ rmse    0.590      NA     1 recipe       line‚Ä¶     5 #> 10 plus_pca_‚Ä¶ Prepro‚Ä¶ rsq     0.988      NA     1 recipe       line‚Ä¶     5 #> # ‚Ä¶ with 30 more rows"},{"path":"https://workflowsets.tidymodels.org/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages ‚Äî reexports","title":"Objects exported from other packages ‚Äî reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% ggplot2 autoplot hardhat extract_fit_engine, extract_fit_parsnip, extract_mold, extract_preprocessor, extract_recipe, extract_spec_parsnip, extract_workflow tune collect_metrics, collect_predictions","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/two_class_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data Sets ‚Äî two_class_set","title":"Example Data Sets ‚Äî two_class_set","text":"Example Data Sets","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/two_class_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Data Sets ‚Äî two_class_set","text":"Workflow sets.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/two_class_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Data Sets ‚Äî two_class_set","text":"Example workflow sets associated model fits. two_class_set two_class_res generated using data package file example-data/two-class-set.R chi_features_set chi_features_res generated using data package file example-data/chi-features-res.R. meant approximate sequence models built Section 1.3 Kuhn Johnson (2019).","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/two_class_set.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example Data Sets ‚Äî two_class_set","text":"Max Kuhn Kjell Johnson (2019) Feature Engineering Selection, https://bookdown.org/max/FES/--complex-example.html","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/two_class_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Data Sets ‚Äî two_class_set","text":"","code":"data(two_class_set) two_class_set #> # A workflow set/tibble: 6 √ó 4 #>   wflow_id      info             option    result     #>   <chr>         <list>           <list>    <list>     #> 1 none_cart     <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 2 none_glm      <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 3 none_mars     <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 4 yj_trans_cart <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 5 yj_trans_glm  <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 6 yj_trans_mars <tibble [1 √ó 4]> <opts[0]> <list [0]>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Process a series of workflows ‚Äî workflow_map","title":"Process a series of workflows ‚Äî workflow_map","text":"workflow_map() execute function across workflows set. various tune_*() functions can used well tune::fit_resamples().","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process a series of workflows ‚Äî workflow_map","text":"","code":"workflow_map(   object,   fn = \"tune_grid\",   verbose = FALSE,   seed = sample.int(10^4, 1),   ... )"},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process a series of workflows ‚Äî workflow_map","text":"object workflow set. fn function run. Acceptable values : tune::tune_grid(), tune::tune_bayes(), tune::fit_resamples(), finetune::tune_race_anova(), finetune::tune_race_win_loss(), finetune::tune_sim_anneal(). verbose logical logging progress. seed single integer set prior function execution. ... Options pass modeling function. See details .","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process a series of workflows ‚Äî workflow_map","text":"updated workflow set. option column updated options tune package functions given workflow_map(). Also, results added result column. computations workflow fail, try-catch object saved place results (without stopping execution).","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Process a series of workflows ‚Äî workflow_map","text":"passing options, anything passed ... combined values option column. values ... override column's values new options added options column. failures execution result corresponding row results contain try-error object. cases model tuning parameters mapped one tuning functions, tune::fit_resamples() used instead warning issued verbose = TRUE. workflow required packages installed, message printed workflow_map() continues next workflow ().","code":""},{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Process a series of workflows ‚Äî workflow_map","text":"","code":"# An example of processed results chi_features_res #> # A workflow set/tibble: 3 √ó 4 #>   wflow_id         info             option    result    #>   <chr>            <list>           <list>    <list>    #> 1 date_lm          <tibble [1 √ó 4]> <opts[2]> <rsmp[+]> #> 2 plus_holidays_lm <tibble [1 √ó 4]> <opts[2]> <rsmp[+]> #> 3 plus_pca_lm      <tibble [1 √ó 4]> <opts[3]> <tune[+]>  # Code examples at if (interactive()) {   system.file(\"example-data\", package = \"workflowsets\") }"},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","title":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","text":"Generate set workflow objects preprocessing model objects","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","text":"","code":"workflow_set(preproc, models, cross = TRUE)"},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","text":"preproc list (preferably named) preprocessing objects: formulas, recipes, workflows::workflow_variables(). models list (preferably named) parsnip model specifications. cross logical: combinations preprocessors models used create workflows? FALSE, length preproc models equal.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","text":"tibble extra class 'workflow_set'. new set includes four columns (others can added): wflow_id contains character strings preprocessor/workflow combination. can changed must unique. info list column tibbles containing specific information, including comments added using comment_add(). tibble also contains workflow object (can easily retrieved using extract_workflow()). option list column include list optional arguments passed functions tune package. can added manually via option_add() automatically options passed workflow_map(). result list column contain objects produced workflow_map() used.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_set.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","text":"preprocessors can combined model objects can one : traditional R formula. recipe definition (un-prepared) via recipes::recipe(). selectors object created workflows::workflow_variables(). Since preproc named list column, combination can used argument (.e., preproc can mixed types).","code":""},{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflow_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a set of workflow objects from preprocessing and model objects ‚Äî workflow_set","text":"","code":"library(workflowsets) library(workflows) library(modeldata) library(recipes) #>  #> Attaching package: ‚Äòrecipes‚Äô #> The following object is masked from ‚Äòpackage:tune‚Äô: #>  #>     tune_args #> The following object is masked from ‚Äòpackage:stats‚Äô: #>  #>     step library(parsnip) library(dplyr) library(rsample) library(tune) library(yardstick) #> For binary classification, the first factor level is assumed to be the event. #> Use the argument `event_level = \"second\"` to alter this as needed.  # ------------------------------------------------------------------------------  data(cells) cells <- cells %>% dplyr::select(-case)  set.seed(1) val_set <- validation_split(cells)  # ------------------------------------------------------------------------------  basic_recipe <-   recipe(class ~ ., data = cells) %>%   step_YeoJohnson(all_predictors()) %>%   step_normalize(all_predictors())  pca_recipe <-   basic_recipe %>%   step_pca(all_predictors(), num_comp = tune())  ss_recipe <-   basic_recipe %>%   step_spatialsign(all_predictors())  # ------------------------------------------------------------------------------  knn_mod <-   nearest_neighbor(neighbors = tune(), weight_func = tune()) %>%   set_engine(\"kknn\") %>%   set_mode(\"classification\")  lr_mod <-   logistic_reg() %>%   set_engine(\"glm\")  # ------------------------------------------------------------------------------  preproc <- list(none = basic_recipe, pca = pca_recipe, sp_sign = ss_recipe) models <- list(knn = knn_mod, logistic = lr_mod)  cell_set <- workflow_set(preproc, models, cross = TRUE) cell_set #> # A workflow set/tibble: 6 √ó 4 #>   wflow_id         info             option    result     #>   <chr>            <list>           <list>    <list>     #> 1 none_knn         <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 2 none_logistic    <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 3 pca_knn          <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 4 pca_logistic     <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 5 sp_sign_knn      <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 6 sp_sign_logistic <tibble [1 √ó 4]> <opts[0]> <list [0]>  # ------------------------------------------------------------------------------ # Using variables and formulas  # Select predictors by their names channels <- paste0(\"ch_\", 1:4) preproc <- purrr::map(channels, ~ workflow_variables(class, c(contains(!!.x)))) names(preproc) <- channels preproc$everything <- class ~ . preproc #> $ch_1 #> $outcomes #> <quosure> #> expr: ^class #> env:  0x55862a1aa8e0 #>  #> $predictors #> <quosure> #> expr: ^c(contains(\"ch_1\")) #> env:  0x55862a1aa8e0 #>  #> attr(,\"class\") #> [1] \"workflow_variables\" #>  #> $ch_2 #> $outcomes #> <quosure> #> expr: ^class #> env:  0x55862a1a4ad8 #>  #> $predictors #> <quosure> #> expr: ^c(contains(\"ch_2\")) #> env:  0x55862a1a4ad8 #>  #> attr(,\"class\") #> [1] \"workflow_variables\" #>  #> $ch_3 #> $outcomes #> <quosure> #> expr: ^class #> env:  0x55862a19f418 #>  #> $predictors #> <quosure> #> expr: ^c(contains(\"ch_3\")) #> env:  0x55862a19f418 #>  #> attr(,\"class\") #> [1] \"workflow_variables\" #>  #> $ch_4 #> $outcomes #> <quosure> #> expr: ^class #> env:  0x55862a19dcd8 #>  #> $predictors #> <quosure> #> expr: ^c(contains(\"ch_4\")) #> env:  0x55862a19dcd8 #>  #> attr(,\"class\") #> [1] \"workflow_variables\" #>  #> $everything #> class ~ . #> <environment: 0x55862eef0b40> #>   cell_set_by_group <- workflow_set(preproc, models[\"logistic\"]) cell_set_by_group #> # A workflow set/tibble: 5 √ó 4 #>   wflow_id            info             option    result     #>   <chr>               <list>           <list>    <list>     #> 1 ch_1_logistic       <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 2 ch_2_logistic       <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 3 ch_3_logistic       <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 4 ch_4_logistic       <tibble [1 √ó 4]> <opts[0]> <list [0]> #> 5 everything_logistic <tibble [1 √ó 4]> <opts[0]> <list [0]>"},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflowsets-package.html","id":null,"dir":"Reference","previous_headings":"","what":"workflowsets: Create a Collection of 'tidymodels' Workflows ‚Äî workflowsets-package","title":"workflowsets: Create a Collection of 'tidymodels' Workflows ‚Äî workflowsets-package","text":"workflow combination model preprocessors (e.g, formula, recipe, etc.) (Kuhn Silge (2021) <https://www.tmwr.org/>). order try different combinations , object can created contains many workflows. functions create workflows en masse well training visualizing results.","code":""},{"path":[]},{"path":"https://workflowsets.tidymodels.org/dev/reference/workflowsets-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"workflowsets: Create a Collection of 'tidymodels' Workflows ‚Äî workflowsets-package","text":"Maintainer: Max Kuhn max@rstudio.com (ORCID) contributors: RStudio [copyright holder, funder]","code":""},{"path":"https://workflowsets.tidymodels.org/dev/news/index.html","id":"workflowsets-development-version","dir":"Changelog","previous_headings":"","what":"workflowsets (development version)","title":"workflowsets (development version)","text":"as_workflow_set() can now take mixture workflows tune_results objects.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/news/index.html","id":"workflowsets-010","dir":"Changelog","previous_headings":"","what":"workflowsets 0.1.0","title":"workflowsets 0.1.0","text":"CRAN release: 2021-07-22 Fixed autoplot() bug , one metric selected ranking metric specified, wrong metric used order workflows (#52) Updated pillar formatting options objects. New extract_*() functions added supersede existing pull_*() functions. part larger move across tidymodels packages towards family generic extract_*() functions. pull_*() functions soft-deprecated, eventually removed","code":""},{"path":"https://workflowsets.tidymodels.org/dev/news/index.html","id":"workflowsets-002","dir":"Changelog","previous_headings":"","what":"workflowsets 0.0.2","title":"workflowsets 0.0.2","text":"CRAN release: 2021-04-16 Ensured workflow_map() fail missing packages function mapped fails.","code":""},{"path":"https://workflowsets.tidymodels.org/dev/news/index.html","id":"workflowsets-001","dir":"Changelog","previous_headings":"","what":"workflowsets 0.0.1","title":"workflowsets 0.0.1","text":"CRAN release: 2021-03-18 First CRAN version","code":""}]
